buildscript {
	ext {
		grailsVersion = project.grailsVersion
	}
	repositories {
		mavenLocal()
		maven { url 'https://repo.grails.org/grails/core' }
	}
	dependencies {
		classpath "org.grails:grails-gradle-plugin:$grailsVersion"
		classpath "org.grails:grails-docs:$grailsVersion"
	}
}

plugins {
	id 'io.spring.dependency-management' version '0.5.2.RELEASE'
	id 'com.jfrog.bintray' version '1.2'
//	id "com.github.hierynomus.license" version "0.11.0"
}

version '1.6.0'
group 'org.grails.plugins'

apply plugin: 'maven-publish'
apply plugin: 'spring-boot'
apply plugin: 'org.grails.grails-plugin'
apply plugin: 'org.grails.grails-doc'

apply from: 'https://raw.githubusercontent.com/grails/grails-profile-repository/master/profiles/plugin/templates/grailsCentralPublishing.gradle'
apply from: 'https://raw.githubusercontent.com/grails/grails-profile-repository/master/profiles/plugin/templates/bintrayPublishing.gradle'

ext {
	grailsVersion = project.grailsVersion
	gradleWrapperVersion = project.gradleWrapperVersion
}

sourceCompatibility = targetCompatibility = 1.7

repositories {
	mavenLocal()
	mavenCentral()
	maven { url 'https://repo.grails.org/grails/core' }
}

dependencyManagement {
	imports {
		mavenBom "org.grails:grails-bom:$grailsVersion"
	}
	applyMavenExclusions false
}

dependencies {

	provided 'javax.servlet:javax.servlet-api:3.1.0'
	provided 'org.grails:grails-dependencies'
	provided 'org.grails:grails-web-boot'
	provided 'org.springframework.boot:spring-boot-autoconfigure'
	provided 'org.springframework.boot:spring-boot-starter-tomcat'

	compile 'net.spy:spymemcached:2.11.6', {
		['log4j', 'slf4j-api'].each { exclude module: it }
	}
	compile 'com.google.guava:guava-io:r03'
	compile 'org.pac4j:pac4j-core:1.6.0', {
		['jcl-over-slf4j', 'logback-classic', 'slf4j-api'].each { exclude module: it }
	}
	compile 'org.pac4j:pac4j-oauth:1.6.0', {
		['jackson-databind', 'jcl-over-slf4j', 'logback-classic'].each { exclude module: it }
	}
	compile 'org.pac4j:pac4j-cas:1.6.0', {
		['jcl-over-slf4j', 'log4j-over-slf4j', 'logback-classic'].each { exclude module: it }
	}
	compile 'com.nimbusds:nimbus-jose-jwt:3.9'

	compile 'org.grails.plugins:spring-security-core:3.0.0.M1'

	console 'org.grails:grails-console'

	testCompile 'commons-logging:commons-logging:1.2'
	testCompile 'org.apache.velocity:velocity:1.7'
	testCompile 'org.gperfutils:gbench:0.4.3-groovy-2.3'
	testCompile 'org.grails.plugins:cache:3.0.1'
	testCompile 'org.grails:grails-plugin-testing'
}

/*
license {

	sourceSets {
		main {
			groovy {
				srcDirs = [
					'grails-app/controllers',
					'grails-app/domain',
					'grails-app/init',
					'grails-app/services',
					'grails-app/taglib',
					'grails-app/utils',
					'src/groovy',
					'scripts'
				]
			}
			java {
				srcDirs = [
					'src/java'
				]
			}
		}
		test {
			groovy {
				def dirs = [
					'src/integration-test/groovy',
					'src/test/groovy'
				]
				new File('test/apps').eachDir { File app ->
					dirs << "test/apps/${app.name}/src/integration-test/groovy"
					dirs << "test/apps/${app.name}/src/test/groovy"
				}

				srcDirs = dirs
			}
		}
	}

	ext.year = Calendar.instance.get(Calendar.YEAR)
	ext.name = 'Alvaro Sanchez-Mariscal'
	ext.email = 'alvaro.sanchezmariscal@gmail.com'
}

licenseMain.dependsOn 'licenseTest'
*/

task docsWithPdf(dependsOn: 'docs') << {
	// based on grails.doc.gradle.PublishPdf
	def outputDir = new File(project.buildDir, 'docs/manual')
	def htmlFile = new File(outputDir, 'guide/single.html')
	def pdfBuilder = new grails.doc.PdfBuilder()
	def xml = pdfBuilder.createXml(htmlFile, outputDir.absolutePath)
	pdfBuilder.createPdf xml, new File(htmlFile.parentFile, 'single.pdf'), htmlFile
}

task wrapper(type: Wrapper) {
	gradleVersion = gradleWrapperVersion
}
